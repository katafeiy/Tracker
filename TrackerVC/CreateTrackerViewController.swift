import UIKit

final class CreateTrackerViewController: UIViewController {
    
    weak var delegate: ProtocolNewHabitViewControllerOutput?
    
    private lazy var habitButton: UIButton = {
        let button = UIButton()
        button.setTitle("–ü—Ä–∏–≤—ã—á–∫–∞", for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 16, weight: .medium)
        button.layer.cornerRadius = 16
        button.layer.masksToBounds = true
        button.backgroundColor = .ypBlackDay
        button.titleLabel?.textColor = .ypWhiteDay
        button.addTarget(self, action: #selector(didHabitButtonTap), for: .touchUpInside)
        return button
    }()
    
    private lazy var irregularEventButton: UIButton = {
        let button = UIButton()
        button.setTitle("–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 16, weight: .medium)
        button.layer.cornerRadius = 16
        button.layer.masksToBounds = true
        button.backgroundColor = .ypBlackDay
        button.titleLabel?.textColor = .ypWhiteDay
        button.addTarget(self, action: #selector(didIrregularEventButtonTap), for: .touchUpInside)
        return button
    }()
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .ypWhiteDay
        setupUI()
        configurationNavigationBar()
    }
    
    private func setupUI() {
        
        let stackView = UIStackView(arrangedSubviews: [habitButton, irregularEventButton])
        stackView.axis = .vertical
        stackView.distribution = .fillEqually
        stackView.spacing = 16
        
        [stackView].forEach{$0.translatesAutoresizingMaskIntoConstraints = false; view.addSubview($0)}
        
        NSLayoutConstraint.activate([
            
            irregularEventButton.heightAnchor.constraint(equalToConstant: 60),
            habitButton.heightAnchor.constraint(equalToConstant: 60),
            
            stackView.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor),
            stackView.centerYAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerYAnchor),
            stackView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 20),
            stackView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -20)
        ])
    }
    
    func configurationNavigationBar() {        
        navigationItem.title = "–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞"
        navigationController?.navigationBar.tintColor = .ypBlackDay
        navigationController?.navigationBar.titleTextAttributes = [
            .font: UIFont.systemFont(ofSize: 16, weight: .medium),
            .foregroundColor: UIColor.ypBlackDay
        ]
    }
    
    @objc func didHabitButtonTap() {
        let habitViewController = NewHabitViewController()
        habitViewController.delegate = delegate
        navigationController?.pushViewController(habitViewController, animated: true)
    }
    
    @objc func didIrregularEventButtonTap() {
        // TODO: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–ø—Ä–∏–Ω—Ç–µ!
        let alert = UIAlertController(title: "–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ\n",
                                      message: "–£–≤–∞–∂–∞–µ–º—ã–π —Ä–µ–≤—å—é–≤–µ—Ä)))\n" +
                                      "–í –∑–∞–¥–∞–Ω–∏–µ 14-–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–Ω–æ –≤ 14-–æ–º —Å–ø—Ä–∏–Ω—Ç–µ," +
                                      " –æ–Ω –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ 15-–æ–º —Å–ø—Ä–∏–Ω—Ç–µ!\n –ß–µ—Å—Ç–Ω–æ–µ —Å–ª–æ–≤–æ!!!)))\n üòâ",
                                      preferredStyle: .alert)
        let action = UIAlertAction(title: "OK", style: .default)
        alert.addAction(action)
        present(alert, animated: true)
    }
}
